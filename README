The SPIRRID package is the part of the project SIMVISAGE 
(http://mordred.imb.rwth-aachen.de/projects/simvisage).

== Documentation of the package generated using sphinx ==
http://mordred.imb.rwth-aachen.de/docs/spirrid/

This project is developed on Linux (Kubuntu, Suse) ETS version < 4.0.

== Installation instructions == 

install enthought tool suit (ETS) and cython
> sudo aptitude install python-enthoughtbase cython
 
see http://mordred.imb.rwth-aachen.de/projects/simvisage/wiki
note for ets >= 4.0: http://blog.enthought.com/open-source/ets-4-0-released/


== spirrid/examples/demo.py ==
 
To test spirrid package on prepared examples run
> python demo.py
you get the user interface to run one of the examples described in the last
section of readme (spirrid/examples/)


== spirrid/ ==

This folder contains tools for RV sampling, code generation and
numerical multidimensional statistical integration.

http://mordred.imb.rwth-aachen.de/projects/simvisage/wiki/SimVizSpirrid


== spirrid/pdistrib (library of statistical distributions) ==

The package provides a traited wrapper for the scipy distributions.

http://mordred.imb.rwth-aachen.de/projects/simvisage/wiki/SimVizPDistrib


== spirrid/util ==

This folder contains customized (extended) source code (enthought, scipy, numpy)
needed for running spirrid.


== spirrid/examples/ ==

The directories "fiber_*" provides the performance studies of the spirrid
integration tool. There are three types of response functions
tested:

 * fiber_tt_2p/: fiber tensile test with 2 parameters 
   one strong discontinuity) 
 * fiber_tt_5p/: fiber tensile test with 5 parameters
   one strong and one weak discontinuity
 * fiber_po_8p/: fiber pullout test with 7 parameters
   one strong, one weak discontinuity 
   and nonlinear range within the response

There are two tests:
 * masked_arrays/: testing of speeding up of evaluation of general function
   using numpy.ma.array
 * numexpr/: testing of speeding up of evaluation of fiber_tt_5p fiber tensile 
   test with 5 parameters one strong and one weak discontinuity) using numexpr

And:
 * script.py: simple python script, described in paper "Using Python for scientific
   computing: efficient and flexible evaluation of the statistical
   characteristics of functions with multivariate random inputs"








 




